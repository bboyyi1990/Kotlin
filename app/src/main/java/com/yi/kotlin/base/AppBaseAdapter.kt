package com.yi.kotlin.baseimport android.graphics.Canvasimport android.graphics.Paintimport android.graphics.Rectimport android.view.Viewimport androidx.recyclerview.widget.RecyclerViewimport com.chad.library.adapter.base.BaseQuickAdapterimport com.chad.library.adapter.base.viewholder.BaseViewHolder/** * @author Yi * @date 2020/4/17 */abstract class AppBaseAdapter<T, K : AppBaseViewHolder<T>>(layoutId: Int) :    BaseQuickAdapter<T, K>(layoutId) {    fun setData(list: MutableList<T>?, reset: Boolean = false) {        if (reset) setNewData(list)        else if (null != list) addData(list)    }    override fun convert(helper: K, item: T) = helper.setData(item)}abstract class AppBaseViewHolder<T>(view: View) : BaseViewHolder(view) {    abstract fun setData(data: T)}class AppBaseDivider : RecyclerView.ItemDecoration() {    private var dividerHeight = 2    private var padding = 0    private var hintDividerIndexList = mutableListOf<Int>()    private val mPaint by lazy { Paint().apply { isAntiAlias = true } }    override fun onDraw(c: Canvas, parent: RecyclerView, state: RecyclerView.State) {        super.onDraw(c, parent, state)// recyclerView是否设置了paddingLeft和paddingRight//        final int left = parent.getPaddingLeft();//        final int right = parent.getWidth() - parent.getPaddingRight();//        final int childCount = parent.getChildCount();//        for (int i = 0; i < childCount; i++) {//            final View child = parent.getChildAt(i);//            final RecyclerView . LayoutParams params = (RecyclerView.LayoutParams) child//                    .getLayoutParams();//            // divider的top 应该是 item的bottom 加上 marginBottom 再加上 Y方向上的位移//            final int top = child.getBottom() + params.bottomMargin +//                    Math.round(ViewCompat.getTranslationY(child));//            // divider的bottom就是top加上divider的高度了//            final int bottom = (int)(top + mDividerHeight);//            c.drawRect(left, top, right, bottom, mPaint);//        }    }    override fun getItemOffsets(        outRect: Rect, view: View, parent: RecyclerView, state: RecyclerView.State    ) {        super.getItemOffsets(outRect, view, parent, state)        val childPos = parent.getChildAdapterPosition(view)        val lastPos = parent.adapter?.itemCount ?: 0 - 1        val hintDivider = (childPos in hintDividerIndexList) || childPos == lastPos        outRect.bottom = if (hintDivider) 0 else dividerHeight        //TODO outRect 四个参数给定的是 item 的padding 值吗    }    fun setHeight(height: Int): AppBaseDivider {        dividerHeight = height        return this    }    fun setHintItemIndexes(indexes: MutableList<Int>): AppBaseDivider {        hintDividerIndexList = indexes        return this    }    fun setDividerColor(color: Int): AppBaseDivider {        mPaint.color = color        return this    }}