package com.yi.kotlin.baseimport android.graphics.Canvasimport android.graphics.Colorimport android.graphics.Rectimport android.graphics.drawable.ColorDrawableimport android.view.Viewimport androidx.recyclerview.widget.RecyclerViewimport com.chad.library.adapter.base.BaseQuickAdapterimport com.chad.library.adapter.base.viewholder.BaseViewHolderimport kotlin.math.roundToInt/** * @author Yi * @date 2020/4/17 */abstract class AppBaseAdapter<T, K : AppBaseViewHolder<T>>(layoutId: Int) :    BaseQuickAdapter<T, K>(layoutId) {    fun setData(list: MutableList<T>?, reset: Boolean = false) {        if (reset) setNewData(list)        else if (null != list) addData(list)    }    override fun convert(helper: K, item: T) = helper.setData(item)}abstract class AppBaseViewHolder<T>(view: View) : BaseViewHolder(view) {    abstract fun setData(data: T)}class AppBaseDivider : RecyclerView.ItemDecoration()  {    private var dividerHeight = 1    private var mPadding = 0    private var hintDividerIndexList = mutableListOf<Int>()    private val mBounds = Rect()    private val mDivider by lazy { ColorDrawable(Color.parseColor("#C8C7CC")) }    override fun onDrawOver(canvas: Canvas, parent: RecyclerView, state: RecyclerView.State) {        super.onDrawOver(canvas, parent, state)        val left = parent.paddingLeft + mPadding        val right = parent.width - parent.paddingRight - mPadding        val childCount = parent.childCount        for (i in 0 until childCount) {            val child = parent.getChildAt(i)            parent.getDecoratedBoundsWithMargins(child, mBounds)            val bottom: Int = mBounds.bottom + child.translationY.roundToInt()            val top = bottom - dividerHeight            //set divider bounds,if last item hint divider            if (i in hintDividerIndexList || i == childCount - 1)                mDivider.setBounds(0, 0, 0, 0)            else                mDivider.setBounds(left, top, right, bottom)            mDivider.draw(canvas)        }    }    override fun getItemOffsets(        outRect: Rect, view: View, parent: RecyclerView, state: RecyclerView.State    ) {        super.getItemOffsets(outRect, view, parent, state)        val childPos = parent.getChildAdapterPosition(view)        val lastPos = (parent.adapter?.itemCount ?: 0) - 1        val hintDivider = (childPos in hintDividerIndexList) || childPos == lastPos        outRect.bottom = if (hintDivider) 0 else dividerHeight    }    fun setHeight(height: Int): AppBaseDivider {        dividerHeight = height        return this    }    fun setHintItemIndexes(indexes: MutableList<Int>): AppBaseDivider {        hintDividerIndexList = indexes        return this    }    fun setDividerColor(color: Int): AppBaseDivider {        mDivider.color = color        return this    }    fun setPadding(padding: Int): AppBaseDivider {        mPadding - padding        return this    }}